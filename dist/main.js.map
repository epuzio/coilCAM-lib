{"mappings":"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","sources":["src/index.js","src/coilCAM/function-operators/1D-functions/index.js","src/coilCAM/function-operators/1D-functions/Sinusoidal.js","src/coilCAM/function-operators/function-helpers.js","src/coilCAM/function-operators/1D-functions/Linear.js","src/coilCAM/function-operators/1D-functions/Exponential.js","src/coilCAM/function-operators/1D-functions/Square.js","src/coilCAM/function-operators/1D-functions/Staircase.js","src/coilCAM/function-operators/2D-functions/index.js","src/coilCAM/function-operators/2D-functions/Sinusoidal2D.js","src/coilCAM/function-operators/2D-functions/Linear2D.js"],"sourcesContent":["import * as functions1D from './coilCAM/function-operators/1D-functions/index.js';\nimport * as functions2D from './coilCAM/function-operators/2D-functions/index.js';\n// import * as complexFunctions from './coilCAM/function-operators/complex-functions/index.js';\n// import * as setup from './coilCAM/setup/index.js';\n\nexport {\n    functions1D,\n    functions2D,\n    // complexFunctions,\n    // setup\n};\n\n// note: any .js files that only export a single function need to export \n// that function as \"export default\" for \"> npm run build\" to execute properly\n// Run \"> npm run build\", then \"npm publish\", (then update the version) every time a change is made!","import sinusoidal from \"./Sinusoidal.js\";\nimport linear from \"./Linear.js\";\nimport exponential from \"./Exponential.js\";\nimport square from \"./Square.js\";\nimport staircase from \"./Staircase.js\";\n\nexport {sinusoidal, linear, staircase, square, exponential};","import { setParams1D } from '../function-helpers.js'\n// import {CoilCAM} from \"../../CoilCAM.js\"\n\n// Sinusoidal\nexport default function sinusoidal(amplitude, offset, nbPoints, values0, mode) {\n    let values = [];\n    [offset, values0] = setParams1D(\"Sinusoidal\", offset, values0, nbPoints, mode);\n\n    for(let i = 0; i < nbPoints; i++){\n        if(mode == \"additive\" || mode == null){\n            values.push(amplitude * Math.sin((2*Math.PI/period)*i + offset[i]) + values0[i]);\n        } else if(mode == \"multiplicative\"){\n            values.push(amplitude * Math.pow(base, ampExp*i + offset[i]) * (values0[i]));\n        }\n    }\n    console.log(\"SINUSOIDAL VALUES:\", values);\n    return values;\n}\n\nwindow.sinusoidal = sinusoidal;\n\n","// Helper Functions\nfunction setParams(paramType, value, nbPoints, mode){\n    if (value == null){\n        if(mode == \"multiplicative\" && paramType == \"values\"){\n            return new Array(nbPoints).fill(1);\n        } else return new Array(nbPoints).fill(0);\n    } else if(!Array.isArray(value)){\n        return new Array(nbPoints).fill(value);\n    } else if(value.length == nbPoints){\n        return value;   \n    }\n    return null;\n}\n\nexport function setParams1D(functionType, offset, values0, nbPoints, mode){\n    offset = setParams(\"offset\", offset, nbPoints, mode);\n    values0 = setParams(\"values\", values0, nbPoints, mode);\n\n    if(offset == null){ throw new Error(\"Length of offset in \" + functionType + \" must be 0 or 1 or equal to nbPoints:\" + nbPoints); }\n    if(values0 == null){ throw new Error(\"Length of values0 in \" + functionType + \" must be 0 or 1 or equal to nbPoints:\" + nbPoints); } \n    return [offset, values0];\n}\n\nexport function setParams2D(functionType, offset0x, offset0y, values0x, values0y, nbPoints, mode){\n    offset0x = setParams(\"offset0x\", offset0x, nbPoints, mode);\n    offset0y = setParams(\"offset0y\", offset0y, nbPoints, mode);\n    values0x = setParams(\"values0x\", values0x, nbPoints, mode);\n    values0y = setParams(\"values0y\", values0y, nbPoints, mode);\n\n    if(offset0x == null){ throw new Error(\"Length of offset in \" + functionType + \" must be 0 or 1 or equal to nbPoints:\" + nbPoints); }\n    if(offset0y == null){ throw new Error(\"Length of offset in \" + functionType + \" must be 0 or 1 or equal to nbPoints:\" + nbPoints); }\n    if(values0x == null){ throw new Error(\"Length of values0 in \" + functionType + \" must be 0 or 1 or equal to nbPoints:\" + nbPoints); } \n    if(values0y == null){ throw new Error(\"Length of values0 in \" + functionType + \" must be 0 or 1 or equal to nbPoints:\" + nbPoints); } \n    \n    \n    return [offset0x, offset0y, values0x, values0y];\n}","import { setParams1D } from '../function-helpers.js'\n\n// Linear\nexport default function linear(amplitude, offset, nbPoints, values0, mode) {\n    let values = [];\n    [offset, values0] = setParams1D(\"Linear\", offset, values0, nbPoints, mode);\n\n    for (let i = 0; i < nbPoints; i++){\n        if (mode == \"additive\"){\n            values.push(((amplitude * i) + offset[i]) + values0[i]);\n        } else if (mode == \"multiplicative\"){\n            values.push(((amplitude * i) + offset[i]) * values0[i]);\n        }\n    }\n    return values;\n}\n\nwindow.linear = linear;","import { setParams1D } from '../function-helpers.js'\n\n// Exponential\nexport default function exponential(amplitude, base, ampExp, offset, nbPoints, values0, mode){\n    let values = [];\n    [offset, values0] = setParams1D(\"Exponential\", offset, values0, nbPoints, mode);\n\n    for(let i = 0; i < nbPoints; i++){\n        if(mode == \"additive\" || mode == null){\n            values.push(amplitude * Math.pow(base, ampExp*i + offset[i]) + values0[i]);\n        } else if(mode == \"multiplicative\"){\n            values.push(amplitude * Math.pow(base, ampExp*i + offset[i]) * values0[i]);\n        }\n    }\n    return values;\n}\n\nwindow.exponential = exponential;","import { setParams1D } from '../function-helpers.js'\n// import {CoilCAM} from \"../../CoilCAM.js\"\n\n// Square\nexport default function square(amplitude, period, offset, bumps, nbPoints, values0, mode){\n    let values = [];\n    [offset, values0] = setParams1D(\"Square\", offset, values0, nbPoints, mode);\n\n    for (let i = 0; i < nbPoints; i++){\n        if (mode == \"additive\" || mode == null){\n            if (bumps && bumps <= (i + offset[i])%period){\n                values.push((amplitude * 0) + values0[i]);\n            } else {\n                values.push((amplitude * 1) + values0[i]);\n            }\n        } else if (mode == \"multiplicative\"){\n            if (bumps && bumps <= (i + offset[i])%period){\n                values.push((amplitude * 0) * values0[i]);\n            } else {\n                values.push((amplitude * 1) * values0[i]);\n            }\n        }\n    }\n    return values;\n}\n\nglobal.square = square;\n\n","import { setParams1D } from '../function-helpers.js'\n\n// Staircase\nexport default function staircase(stepWidth, stepHeight, offset, nbPoints, values0, mode){\n    let values = [];\n    let index = 0;\n    [offset, values0] = setParams1D(\"Staircase\", offset, values0, nbPoints, mode);\n\n    for (let i = 0; i < nbPoints; i++){\n        if (mode == \"additive\" || mode == null ){\n            if (i % stepWidth == 0 && i != 0){\n                index += stepHeight;\n            }\n            values.push(index + offset[i] + values0[i]);\n        }\n        if (mode == \"multiplicative\"){\n            if (i % stepWidth == 0 && i != 0){\n                index += stepHeight;\n            }\n            values.push((index + offset[i]) * values0[i]);\n        }\n    }\n    return values;\n}\n\nwindow.staircase = staircase;\n","import sinusoidal2D from \"./Sinusoidal2D.js\";\nimport linear2D from \"./Linear2D.js\";\n\nexport {sinusoidal2D, linear2D};","import { setParams2D } from '../function-helpers.js'\n\nexport default function sinusoidal2D(amplitudeX1, periodX1, amplitudeX2, periodX2, offset0x, offset0y, nbPoints, values0x, values0y, mode) {\n    let pointsX = [];\n    let pointsY = [];\n    [offset0x, offset0y, values0x, values0y] = setParams2D(\"Sinusoidal2D\", offset0x, offset0y, values0x, values0y, nbPoints, mode);\n    \n    for (let i = 0; i < nbPoints; i++) {\n        if (mode == \"additive\" || mode == null) {\n            pointsX.push(amplitudeX1 * Math.cos(2 * Math.PI * i / periodX1 + offset0x[i]) + values0x[i]);\n            pointsY.push(amplitudeX2 * Math.sin(2 * Math.PI * i / periodX2 + offset0y[i]) + values0y[i]);\n        } else if (mode == \"multiplicative\") {\n            pointsX.push(amplitudeX1 * Math.cos(2 * Math.PI * i / periodX1 + offset0x[i]) * values0x[i]);\n            pointsY.push(amplitudeX2 * Math.sin(2 * Math.PI * i / periodX2 + offset0y[i]) * values0y[i]);\n        }\n    }\n    return new Array(pointsX, pointsY);\n}\n\nwindow.sinusoidal2D = sinusoidal2D;","import { setParams2D } from '../function-helpers.js'\n\nexport default function linear2D(amplitudeX1, offsetX1, amplitudeX2, offsetX2, nbPoints, values0x, values0y, mode){\n    let pointsX = [];\n    let pointsY = [];\n    [offsetX1, offsetX2, values0x, values0y] = setParams2D(\"Linear2D\", offsetX1, offsetX2, values0x, values0y, nbPoints, mode);\n    \n    for (let i = 0; i < nbPoints; i++){\n        if (mode == \"additive\" || mode == \"\"){\n            pointsX.push((amplitudeX1 * i + offsetX1[i]) + values0x[i]);\n            pointsY.push((amplitudeX2 * i + offsetX2[i]) + values0y[i]);\n        } else if (mode == \"multiplicative\"){\n            pointsX.push((amplitudeX1 * i + offsetX1[i]) * values0x[i]);\n            pointsY.push((amplitudeX2 * i + offsetX2[i]) * values0y[i]);\n        }\n    }\n    return new Array(pointsX, pointsY);\n}\n\nwindow.linear2D = linear2D;"],"names":[],"version":3,"file":"main.js.map"}